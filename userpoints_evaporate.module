<?php
/**
 * A few defines that the module wants to use.
 */
define('USERPOINTS_EVAPORATE_HOUR', 60 * 60);
define('USERPOINTS_EVAPORATE_DAY', 24 * USERPOINTS_EVAPORATE_HOUR);
define('USERPOINTS_EVAPORATE_WEEK', 7 * USERPOINTS_EVAPORATE_DAY);
define('USERPOINTS_EVAPORATE_MONTH', 30 * USERPOINTS_EVAPORATE_DAY);

// Run time offset - 3 minutes.
define('USERPOINTS_EVAPORATE_OFFSET', 60 * 3);

/**
 * Implementation of hook_menu()
 *
 * Module administration
 */
function userpoints_evaporate_menu() {
  $items['admin/settings/userpoints/evaporate'] = array(
    'title' => 'Evaporation Settings',
    'description' => 'Change settings for the userpoints_evaporate module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('userpoints_evaporate_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer userpoints'),
    'file' => 'userpoints_evaporate.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_cron()
 *
 * Do the actual work on cron run.
 */
function userpoints_evaporate_cron() {

  // If last run time plus interval is greater than now, it's not time to run yet.
  //
  if (variable_get('userpoints_evaporate_timestamp', 0) + variable_get('userpoints_evaporate_interval', USERPOINTS_EVAPORATE_DAY) > time() ) {
    return;
  }

  // Set a new timestamp.
  //
  // To avoid bug #733358 where due to variable run length the timestamp isn't always
  // the same interval of seconds apart, let's say we ran 3 minutes ago. Also, set the
  // timestamp before the module runs its queries, to avoid more time uncertainty.
  //
  // This will work fine unless you run cron every 4 minutes. So don't do that. Ever.
  //
  // However, do NOT set the timestamp in the variable table until the actual update
  // queries complete. See #963908.
  //
  $timestamp = time() - USERPOINTS_EVAPORATE_OFFSET;

  // Create a query to add entry in the {userpoints_txn} table for each
  // user we're about to evaporate some points from.
  //
  $query_txn = "INSERT INTO {userpoints_txn} (uid, approver_uid, points, time_stamp, changed, description, tid, operation)
                SELECT up.uid, 1, -%d, %d, %d, '%s', %d, '%s' FROM {userpoints} AS up";
  $args_txn = array(
    variable_get('userpoints_evaporate_number', 1),
    time(),
    time(),
    variable_get('userpoints_evaporate_description', ''),
    variable_get('userpoints_evaporate_tid', userpoints_get_default_tid()),
    'evaporate',
  );

  // Create the query to remove points.
  //
  $query_ttl = "UPDATE {userpoints} SET points = points - %d";
  $args_ttl = array(variable_get('userpoints_evaporate_number', 1));

  // If only for inactive users, check for last activity. This must be done
  // before I check for the userpoints_no_negative module, as the INNER JOIN
  // is more efficient than a sub-query and the sub-query might not get cached.
  //
  if (variable_get('userpoints_evaporate_inactive', 0)) {
    // Calculate as a number of seconds.
    $delta  = variable_get('userpoints_evaporate_inactive_unit', USERPOINTS_EVAPORATE_DAY);
    $delta *= variable_get('userpoints_evaporate_inactive_delta', 1);

    // Do an inner join on the users table to only get inactive ones.
    $query_txn .= " INNER JOIN {users} AS u ON (up.uid = u.uid AND u.access < %d)";
    $args_txn[] = time() - $delta;

    // Add a subquery where clause to limit this to inactive users.
    $query_ttl .= " WHERE uid IN (SELECT uid FROM {users} WHERE access < %d)";
    $args_ttl[] = time() - $delta;
  }

  // If the no_negative module is installed, don't allow points to go negative.
  // Unfortunately I need to re-check whether this only needs to happen for
  // inactive users, as the ttl query I'm appending to can be different if so.
  //
  if (module_exists("userpoints_no_negative")) {
    $query_txn .= " WHERE up.points >= %d";
    $args_txn[] = variable_get('userpoints_evaporate_number', 1);

    if (variable_get('userpoints_evaporate_inactive', 0)) {
      $query_ttl .= " AND points >= %d";
      $args_ttl[] = variable_get('userpoints_evaporate_number', 1);
    }
    else {
      $query_ttl .= " WHERE points >= %d";
      $args_ttl[] = variable_get('userpoints_evaporate_number', 1);
    }
  }


  // Run the query to add relevant entries in the {userpoints_txn} table.
  //
  db_query($query_txn, $args_txn);

  // Run the update query to evaporate some points from the {userpoints} table.
  //
  db_query($query_ttl, $args_ttl);

  // Now update the timstamp, so hook_cron knows we ran. And finished.
  //
  variable_set('userpoints_evaporate_timestamp', $timestamp);

  // And write a log entry to the watchdog table.
  //
  watchdog('userpoints_evaporate', 'userpoints_evaporate cron run evaporated some points', array(), WATCHDOG_INFO);
}
