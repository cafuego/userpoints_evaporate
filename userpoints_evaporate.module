<?php
/**
 * A few defines that the module wants to use.
 */
define('USERPOINTS_EVAPORATE_HOUR', 60 * 60);
define('USERPOINTS_EVAPORATE_DAY', 24 * USERPOINTS_EVAPORATE_HOUR);
define('USERPOINTS_EVAPORATE_WEEK', 7 * USERPOINTS_EVAPORATE_DAY);
define('USERPOINTS_EVAPORATE_MONTH', 30 * USERPOINTS_EVAPORATE_DAY);

// Run time offset - 3 minutes.
define('USERPOINTS_EVAPORATE_OFFSET', 60 * 3);

/**
 * Implementation of hook_menu()
 *
 * Module administration
 */
function userpoints_evaporate_menu() {
  $items['admin/settings/userpoints/evaporate'] = array(
    'title' => 'Evaporation Settings',
    'description' => 'Change settings for the userpoints_evaporate module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('userpoints_evaporate_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer userpoints'),
    'file' => 'userpoints_evaporate.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_cron()
 *
 * Do the actual work on cron run.
 */
function userpoints_evaporate_cron() {

  // Cycle through the meat of the module for each enabled points taxonomy term.
  //
  $settings = variable_get('userpoints_evaporate', array());

  foreach ($settings as $tid => $setting) {
    // Early return if not enabled for this term or no interval is specified.
    if (empty($setting['enabled']) || empty($setting['interval']))
      continue;

    // If last run time plus interval is greater than now, it's not time to run yet.
    //
    if (($setting['timestamp'] + $setting['interval']) > time() ) {
      return;
    }

    // Set a new timestamp.
    //
    // To avoid bug #733358 where due to variable run length the timestamp isn't always
    // the same interval of seconds apart, let's say we ran 3 minutes ago. Also, set the
    // timestamp before the module runs its queries, to avoid more time uncertainty.
    //
    // This will work fine unless you run cron every 4 minutes. So don't do that. Ever.
    //
    // However, do NOT set the timestamp in the variable table until the actual update
    // queries complete. See #963908.
    //
    $timestamp = time() - USERPOINTS_EVAPORATE_OFFSET;

    // Update the settings array with the new timestamp, so it's there when we save it
    // after the run completes.
    $settings[$tid]['timestamp'] = $timestamp;

    // Create a query to add entry in the {userpoints_txn} table for each
    // user we're about to evaporate some points from.
    //
    $query_txn = "INSERT INTO {userpoints_txn} (uid, approver_uid, points, time_stamp, changed, description, tid, operation)
                SELECT up.uid, 1, -%d, %d, %d, '%s', %d, '%s' FROM {userpoints} AS up";
    $args_txn = array(
      $setting['number'],
      time(),
      time(),
      $setting['description'],
      $tid,
      'evaporate',
    );

    // Create the query to remove points.
    //
    $query_ttl = "UPDATE {userpoints} SET points = points - %d WHERE tid = %d";
    $args_ttl = array($setting['number'], $tid);

    // If only for inactive users, check for last activity. This must be done
    // before I check for the userpoints_no_negative module, as the INNER JOIN
    // is more efficient than a sub-query and the sub-query might not get cached.
    //
    if ($setting['inactive']['enabled']) {
      // Calculate as a number of seconds.
      $delta  = $setting['inactive']['unit'];
      $delta *= $setting['inactive']['delta'];

      // Do an inner join on the users table to only get inactive ones.
      $query_txn .= " INNER JOIN {users} AS u ON (up.uid = u.uid AND u.access < %d)";
      $args_txn[] = time() - $delta;

      // Add a subquery where clause to limit this to inactive users.
      $query_ttl .= " WHERE uid IN (SELECT uid FROM {users} WHERE access < %d)";
      $args_ttl[] = time() - $delta;
    }

    // If the no_negative module is installed, don't allow points to go negative.
    // Unfortunately I need to re-check whether this only needs to happen for
    // inactive users, as the ttl query I'm appending to can be different if so.
    //
    if (module_exists("userpoints_no_negative")) {
      $query_txn .= " WHERE up.points >= %d";
      $args_txn[] = $setting['number'];

      if ($setting['inactive']['enabled']) {
        $query_ttl .= " AND points >= %d";
        $args_ttl[] = $setting['number'];
      }
      else {
        $query_ttl .= " WHERE points >= %d";
        $args_ttl[] = $setting['number'];
      }
    }

    // Run the query to add relevant entries in the {userpoints_txn} table.
    //
    db_query($query_txn, $args_txn);

    // Run the update query to evaporate some points from the {userpoints} table.
    //
    db_query($query_ttl, $args_ttl);

    // Now save the settings with the updated timestamp, so hook_cron knows we ran
    // and finished for this term.
    //
    variable_set('userpoints_evaporate', $settings);

    // Get the taxo term for this tid, so the watchdog entry can be prettier.
    $term = taxonomy_get_term($tid);

    // And write a log entry to the watchdog table.
    //
    watchdog('userpoints_evaporate', 'userpoints_evaporate cron run evaporated some @term points', array('@term' => $term->name), WATCHDOG_INFO);

  }
}
