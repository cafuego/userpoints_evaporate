<?php
/**
 * A few defines that the module wants to use.
 */
define('USERPOINTS_EVAPORATE_HOUR', 60 * 60);
define('USERPOINTS_EVAPORATE_DAY', 24 * USERPOINTS_EVAPORATE_HOUR);
define('USERPOINTS_EVAPORATE_WEEK', 7 * USERPOINTS_EVAPORATE_DAY);

// Run time offset - 3 minutes.
define('USERPOINTS_EVAPORATE_OFFSET', 60 * 3);

/**
 * Implementation of hook_menu()
 *
 * Module administration
 */
function userpoints_evaporate_menu() {
  $items['admin/settings/userpoints/evaporate'] = array(
    'title' => 'Evaporation Settings',
    'description' => 'Change settings for the userpoints_evaporate module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('userpoints_evaporate_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer userpoints'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Display the settings form.
 */
function userpoints_evaporate_admin_settings() {

  $options = array(
    USERPOINTS_EVAPORATE_HOUR => t('Once an hour'),
    USERPOINTS_EVAPORATE_DAY => t('Once a day'),
    USERPOINTS_EVAPORATE_WEEK => t('Once a week'),
  );

  $form['userpoints_evaporate_interval'] = array(
    '#title' => 'Interval',
    '#description' => t('How quickly do userpoints evaporate?'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => variable_get('userpoints_evaporate_interval', USERPOINTS_EVAPORATE_DAY),
  );
  $form['userpoints_evaporate_number'] = array(
    '#title' => 'Number',
    '#description' => t('How many points evaporate at once?'),
    '#type' => 'select',
    '#options' => array(1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 =>8, 9 => 9),
    '#default_value' => variable_get('userpoints_evaporate_number', 1),
  );
  $form['userpoints_evaporate_description'] = array(
    '#title' => 'Description',
    '#description' => t('An optional description to be added in \'My points\' when points are evaporated.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('userpoints_evaporate_description', ''),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_cron()
 *
 * Do the actual work on cron run.
 */
function userpoints_evaporate_cron() {

  // If last run time plus interval is greater than now, it's not time to run yet.
  //
  if (variable_get('userpoints_evaporate_timestamp', 0) + variable_get('userpoints_evaporate_interval', USERPOINTS_EVAPORATE_DAY) > time() ) {
    return;
  }

  // Set a new timestamp.
  //
  // To avoid bug #733358 where due to variable run length the timestamp isn't always
  // the same interval of seconds apart, let's say we ran 3 minutes ago. Also, set the
  // timestamp before the module runs its queries, to avoid more time uncertainty.
  //
  // This will work fine unless you run cron every 4 minutes. So don't do that. Ever.
  //
  // However, do NOT set the timestamp in the variable table until the actual update
  // queries complete. See #963908.
  //
  $timestamp = time() - USERPOINTS_EVAPORATE_OFFSET;

  // Create a query to add entry in the {userpoints_txn} table for each
  // user we're about to evaporate some points from.
  //
  $query_txn = "INSERT INTO {userpoints_txn} (uid, approver_uid, points, time_stamp, changed, description, tid, operation)
                SELECT uid, 1, -%d, %d, %d, '%s', %d, '%s' FROM {userpoints}";
  $args_txn = array(
    variable_get('userpoints_evaporate_number', 1),
    time(),
    time(),
    variable_get('userpoints_evaporate_description', ''),
    variable_get('userpoints_evaporate_tid', userpoints_get_default_tid()),
    'evaporate',
  );

  // Create the query to remove points.
  //
  $query_ttl = "UPDATE {userpoints} SET points = points - %d";
  $args_ttl = array(variable_get('userpoints_evaporate_number', 1));

  // If the no_negative module is installed, don't allow points to go negative.
  //
  if (module_exists("userpoints_no_negative")) {
    $query_txn .= " WHERE points >= %d";
    $args_txn[] = variable_get('userpoints_evaporate_number', 1);

    $query_ttl .= " WHERE points >= %d";
    $args_ttl[] = variable_get('userpoints_evaporate_number', 1);
  }

  // Run the query to add relevant entries in the {userpoints_txn} table.
  //
  db_query($query_txn, $args_txn);

  // Run the update query to evaporate some points from the {userpoints} table.
  //
  db_query($query_ttl, $args_ttl);

  // Now update the timstamp, so hook_cron knows we ran. And finished.
  //
  variable_set('userpoints_evaporate_timestamp', $timestamp);

  // And write a log entry to the watchdog table.
  //
  watchdog('userpoints_evaporate', 'userpoints_evaporate cron run evaporated some points', array(), WATCHDOG_INFO);
}
